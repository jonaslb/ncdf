_SMEKA_project = 1

# Contains specific default information for this
# project

# Step this version upon new versions
PROJECT_VERSION = 0.3

# These are constant default
PROJECT_NAME = ncdf

# Define custom options for fdict
STATIC ?= 1
# If the library was built previously,
# we default to building the shared library.
ifneq ("$(wildcard libncdf.so)","")
 SHARED ?= 1
else
 SHARED ?= 0
endif

# Create the list of libraries
ifeq ($(STATIC),1)
  LIBRARIES += libncdf.a
endif
ifeq ($(SHARED),1)
  LIBRARIES += libncdf.so
  # Forcefully denote that objects should have
  # position independent code
  # THIS IS A SMEKA SETTING
  PIC = 1
endif


# Silence the error messages when piping
PIPE_SILENT ?= 2> /dev/null


# Create custom installation of modules
.NOTPARALLEL: install_mod
smeka-install: install_mod
install_mod:
	install -pm $(_OCT_rwrr) -t $(FMOD_DIR) $(F_MODS)

.NOTPARALLEL: install_settings
smeka-install: install_settings
install_settings:
	install -pm $(_OCT_rwrr) -t $(BIN_DIR) settings.bash


# Force the deletion of both libraries
clean:
	-rm -f libncdf.so
	-rm -f libncdf.a


# Figure out how fdict is linked...
# The reason is that it may be build automatically
# in the fdict sub-directory.

# First we define how to build the libvardict.a
# in the sub-directory
libvardict.a:
	$(MAKE) -C fdict "VPATH=$(VPATH)/fdict" \
		"SETUP=$(SETUP)" lib


#    Check whether the library is defined
#    in the LIBS variable.
ifeq (,$(findstring "vardict",$(LIBS)))
NCDF_FDICT_LOCAL = 1

# Add dependency (without adding the
# dependency to the list of targets ($^))
$(LIBRARIES): | libvardict.a

.PHONY: clean-fdict
clean-fdict:
	$(MAKE) -C fdict clean
clean: clean-fdict

else

NCDF_FDICT_LOCAL = 0

endif


# The settings.bash file is here created from the fdict file
settings.bash: FORCE
	$(pushd $(VPATH) ; VPATH=$(VPATH) ./setup.sh --default ; popd)

# Local Variables:
#  mode: makefile-gmake
# End:
